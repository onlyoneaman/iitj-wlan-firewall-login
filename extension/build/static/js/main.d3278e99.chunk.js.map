{"version":3,"sources":["Enums/StorageEnums.js","Common/helpers/Sleep.js","main.js","Components/Heading.js","Components/Creds.js","Components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["MY_USERNAME","MY_PASSWORD","timeInMS","a","Promise","resolve","setTimeout","Sleep","getCredsFromChrome","chrome","storage","sync","get","val","u","p","then","r","console","log","Title","Typography","Info","show","title","InfoCircleOutlined","Heading","info","level","Creds","useState","load","setLoad","setU","setP","useEffect","getCreds","initialValues","username","password","Item","label","Password","Footer","target","rel","href","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oRAMaA,EALI,UAOJC,EANI,U,4CCFjB,WAAqBC,GAArB,SAAAC,EAAA,+EACS,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASH,OADpD,4C,sBAIeK,M,4CCSR,SAAeC,IAAtB,+B,4CAAO,8BAAAL,EAAA,6DAGHM,OAAOC,QAAQC,KAAKC,IAAI,CACtBZ,EAAaC,IACZ,SAACY,GACFC,EAAID,EAAIb,YACRe,EAAIF,EAAIZ,eAPP,kBASI,CAACa,EAAGC,IATR,cAWHR,EAAM,KACHS,MAAK,SAAAC,GACJC,QAAQC,IAAI,UADH,MA0BR,CAAC,QAAS,YA1BF,mBAERL,EAFQ,KAENC,EAFM,QAIbG,QAAQC,IAAI,QAhBT,kBAiBI,CAACL,EAAGC,IAjBR,4C,4DCTAK,EAASC,IAATD,MAEDE,EAAO,SAAC,GAEZ,OAFuB,EAAVC,KAKX,cAAC,IAAD,CACEC,MAAM,YADR,SAGE,cAACC,EAAA,EAAD,MANc,MAoBLC,EATC,SAAC,GAA0B,IAAzBF,EAAwB,EAAxBA,MAAwB,IAAjBG,YAAiB,SACxC,OACE,eAACP,EAAD,CAAOQ,MAAO,EAAd,UACGJ,EADH,OAEE,cAAC,EAAD,CAAMD,KAAMI,QC8BHE,EAhDD,WAAO,IAAD,EACMC,oBAAS,GADf,mBACXC,EADW,KACLC,EADK,OAEAF,mBAAS,IAFT,mBAEXhB,EAFW,KAERmB,EAFQ,OAGAH,mBAAS,IAHT,mBAGXf,EAHW,KAGRmB,EAHQ,iDAKlB,sBAAA/B,EAAA,sDACE6B,GAAQ,GACRxB,IACGQ,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZe,GAAQ,GACRC,EAAKhB,EAAE,IACPiB,EAAKjB,EAAE,OAPb,4CALkB,sBAoBlB,OAJAkB,qBAAU,YAhBQ,mCAiBhBC,KACC,IAGD,gCACI,cAAC,EAAD,CACEZ,MAAM,qBAEPO,EAAO,cAAC,IAAD,IACR,eAAC,IAAD,CACEM,cAAe,CACbC,SAAUxB,EACVyB,SAAUxB,GAHd,UAME,cAAC,IAAKyB,KAAN,CACEC,MAAM,WADR,SAGE,cAAC,IAAD,MAEF,cAAC,IAAKD,KAAN,CACEC,MAAM,WADR,SAGE,cAAC,IAAMC,SAAP,aCnCGC,EARA,WACb,OACE,6DACkB,mBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAK,sCAAlD,sBCaPC,EAdH,WAEV,OACE,qBAAKC,UAAU,MAAf,SACE,qBAAKA,UAAU,oBAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,YCCKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBnC,MAAK,YAAkD,IAA/CoC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d3278e99.chunk.js","sourcesContent":["const StorageEnums = {\n  WLAN_USERNAME: 'wlan_us',\n  WLAN_PASSWORD: 'wlan_pd',\n  EXTENSION_RUNS: 'wlan_runs'\n}\n\nexport const MY_USERNAME = StorageEnums.WLAN_USERNAME\n\nexport const MY_PASSWORD = StorageEnums.WLAN_PASSWORD\n\nexport const EXTENSION_COUNTS = StorageEnums.EXTENSION_RUNS","async function Sleep(timeInMS) {\n  return new Promise(resolve => setTimeout(resolve, timeInMS));\n}\n\nexport default Sleep","import {MY_USERNAME, MY_PASSWORD} from './Enums/StorageEnums'\nimport RunServer from './Common/ApiCalls/Apis'\nimport Sleep from './Common/helpers/Sleep'\n\n/*global chrome*/\n\nexport async function saveCreds(username, password) {\n  chrome.storage.sync.set({\n    MY_USERNAME: username, \n    MY_PASSWORD: password\n  }, ()=>{console.log(\"Credentials Updated Successfully\")})\n}\n\nexport async function getCredsFromChrome() {\n  let u, p;\n  if( RunServer || process.env.NODE_ENV !== 'development') {\n    chrome.storage.sync.get([\n      MY_USERNAME, MY_PASSWORD \n    ], (val)=>{\n      u = val.MY_USERNAME;\n      p = val.MY_PASSWORD;\n    })\n    return [u, p];\n  } else {\n    Sleep(3000)\n      .then(r => {\n        console.log('finish');\n        [u,p] = dummyCreds()\n      })\n    console.log('next')\n    return [u, p]\n  }\n}\n\nexport async function changeColor() {\n  chrome.storage.sync.set({color: \"#3aa757\"}, ()=>{});\n\n  await chrome.tabs.query({active: true, currentWindow: true}, \n    (\n      r => {\n      chrome.tabs.executeScript(r[0].id , {file: 'scripts/changeBgColor.js'}, function() {\n        if(chrome.runtime.lastError) {\n          console.error(\"Script injection failed: \" + chrome.runtime.lastError.message);\n        }\n      })\n    }\n  ));\n  \n}\n\nfunction dummyCreds() {\n  return ['kumar', 'password']\n}","import React from 'react'\nimport {Typography, Tooltip} from 'antd'\nimport {InfoCircleOutlined} from '@ant-design/icons'\n\nconst {Title} = Typography\n\nconst Info = ({show}) => {\n\n  if(!show) {return null}\n\n  return(\n    <Tooltip\n      title=\"Info Text\"\n    >\n      <InfoCircleOutlined />\n    </Tooltip>\n  )\n}\n\nconst Heading = ({title, info = true}) => {\n  return(\n    <Title level={4} >\n      {title}&nbsp;\n      <Info show={info} />\n    </Title>\n  )\n}\n\nexport default Heading","import React, {useState, useEffect} from 'react'\nimport {Form, Spin, Input} from 'antd';\nimport { getCredsFromChrome } from '../main';\nimport Heading from '../Components/Heading'\n\nconst Creds = () => {\n  const [load, setLoad] = useState(true)\n  const [u, setU] = useState('')\n  const [p, setP] = useState('')\n\n  async function getCreds() {\n    setLoad(true)\n    getCredsFromChrome()\n      .then(r => {\n        console.log(r)\n        setLoad(false)\n        setU(r[0]);\n        setP(r[1]);\n      })\n  }\n\n  useEffect(()=> {\n    getCreds()\n  }, [])\n\n  return(\n    <div>\n        <Heading \n          title=\"LDAP Credentials\"\n        />\n        {load ? <Spin /> : (\n        <Form\n          initialValues={{\n            username: u,\n            password: p\n          }}\n        >\n          <Form.Item\n            label=\"Username\"\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            label=\"Password\"\n          >\n            <Input.Password />\n          </Form.Item>\n        </Form>\n        )}\n    </div>\n  )\n}\n\nexport default Creds","import React from 'react'\n\nconst Footer = () => {\n  return(\n    <div>\n      Made with ❤️ by <a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://instagram.com/_a_gryffindor\">Aman</a>\n    </div>\n  )\n}\n\nexport default Footer","import './Components/all.sass'\nimport Creds from './Components/Creds'\nimport Footer from './Components/Footer'\n\nconst App = () => {\n\n  return (\n    <div className=\"App\">\n      <div className=\"has-text-centered\">\n        <div className=\"section pt-4 pb-2\">\n          <Creds />\n          <Footer />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}