{"version":3,"sources":["Components/Heading.js","Common/Events/SendEvent.js","Enums/ApplicationConstants.js","Components/Creds.js","Components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Title","Typography","Info","show","title","InfoCircleOutlined","Heading","info","level","SendEvent","category","action","label","ReactGA","event","ApplicationConstants","googleAnalytics","trackingCode","GET_CREDS","Creds","useState","load","setLoad","Form","useForm","form","message","setMessage","empty","setEmpty","setTitle","stopLoading","a","getCredsFromChrome","u","p","chrome","storage","sync","get","val","wlan_us","wlan_pd","console","group","log","groupEnd","setCreds","showMessage","setFieldsValue","username","password","setFormValues","useEffect","initialize","debug","titleCase","initializeGA","getCreds","className","hideRequiredMark","onFinish","values","set","onFinishFailed","r","layout","Item","noStyle","rules","required","name","Password","type","htmlType","Footer","target","rel","onClick","href","GithubOutlined","App","style","display","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2628fe75.chunk.js","sourcesContent":["import React from 'react'\nimport {Typography, Tooltip} from 'antd'\nimport {InfoCircleOutlined} from '@ant-design/icons'\n\nconst {Title} = Typography\n\nconst Info = ({show}) => {\n\n  if(!show) {return null}\n\n  return(\n    <Tooltip\n      title=\"WLAN Cred stores your login info in your browser only and never shares it.\"\n    >\n      <InfoCircleOutlined />\n    </Tooltip>\n  )\n}\n\nconst Heading = ({title, info = true}) => {\n  return(\n    <Title level={4} >\n      {title}&nbsp;\n      <Info show={info} />\n    </Title>\n  )\n}\n\nexport default Heading","import ReactGA from 'react-ga'\n\nfunction SendEvent(category, action, label) {\n  ReactGA.event({\n    category: category,\n    action: action,\n    label: label\n  })\n}\n\nexport default SendEvent","const ApplicationConstants = {\n  googleAnalytics: {\n    trackingCode: \"UA-178422717-2\"\n  }\n}\n\nexport default ApplicationConstants","/*global chrome*/\nimport React, {useState, useEffect} from 'react'\nimport {Form, Spin, Input, Button} from 'antd';\nimport Heading from '../Components/Heading'\nimport ReactGA from 'react-ga'\nimport SendEvent from '../Common/Events/SendEvent'\nimport ApplicationConstants from '../Enums/ApplicationConstants';\n\nconst SAVE_MESSAGE = \"Saving Credentials in your browser\"\nconst GET_CREDS = \"Retrieving your credentials from browser\"\n\nconst Creds = () => {\n  const [load, setLoad] = useState(true)\n  const [form] = Form.useForm()\n  const [message, setMessage] = useState('')\n  const [empty, setEmpty] = useState(false)\n  const [title, setTitle] = useState('')\n\n  const startLoading = () => {setLoad(true)}\n  const stopLoading = () => {setLoad(false)}\n\n  async function getCreds() {\n    setLoad(true)\n    setMessage(GET_CREDS)\n    getCredsFromChrome()\n  }\n\n  function setFormValues(u, p) {\n    form.setFieldsValue({\n      username: u,\n      password: p\n    })\n  }\n\n  function saveCreds(username, password) {\n    SendEvent('Save Credentials', 'Saving Credentials in Chrome', 'Save Credentials')\n    if(process.env.NODE_ENV !== \"development\") {\n      chrome.storage.sync.set({\n        wlan_us: username, \n        wlan_pd: password\n      }, ()=>{\n        console.log('Saved User Credentials username: ' + username);\n        SendEvent('Save Credentials Successful', 'Saving Credentials Success '+ username, 'Save Credentials')\n        getCredsFromChrome(true)\n        showMessage('Credentials Saved 👍')\n        stopLoading()\n      }) \n    } else {\n      console.log('Saved User Credentials');\n      SendEvent('Save Credentials Successful', 'Saving Credentials Success '+ username, 'Save Credentials')\n      stopLoading()\n      showMessage('Credentials Saved 👍')\n      getCredsFromChrome(true)\n    }\n  }\n\n  function submit(values) {\n    startLoading()\n    setMessage(SAVE_MESSAGE)\n    saveCreds(values.username, values.password)\n  }\n\n  function initializeGA() {\n    let trackingCode = ApplicationConstants.googleAnalytics.trackingCode\n    ReactGA.initialize(trackingCode, {\n      debug: false,\n      titleCase: false\n    })\n  }\n\n  function getCredsFromChrome(show = false) {\n    SendEvent(\n      'Get Credentials',\n      'Getting Credentials Popup',\n      'Get Credentials'\n    )\n    let u, p;\n    if( process.env.NODE_ENV !== 'development') {\n      chrome.storage.sync.get([\n        'wlan_us', 'wlan_pd' \n      ], (val)=>{\n        u = val.wlan_us || '';\n        p = val.wlan_pd || '';\n        console.group(\"Get Creds\")\n        console.log('val: ', val);\n        console.log('u: ', u)\n        console.log('p: ', p)\n        console.groupEnd()\n        setCreds(u, p, show)\n      })\n    } else {\n      [u,p] = dummyCreds()\n      setCreds(u, p)\n    }\n  }\n\n  function setCreds(u, p, show) {\n    console.log('finish');\n    if(!u || !p ) {\n      showMessage('Enter Your LDAP Credntials.')\n    } else {      \n      !show && setEmpty(false);\n      console.log('finish');\n    }\n    SendEvent('Get Credentials Successful', 'Successfully Retrieved Credentials ' + u, 'Get Credentials')\n    setFormValues(u, p);\n    stopLoading()\n  }\n\n  function showMessage(message) {\n    setTitle(message)\n    setEmpty(true)\n  }\n\n  function dummyCreds() {\n    return ['', '']\n  }\n\n  useEffect(()=> {\n    initializeGA()\n    getCreds()\n    console.log('Console logs are meant for debugging purposes only.')\n  }, [])\n\n  return(\n    <div>\n        <Heading \n          title=\"WLAN CRED\"\n        />\n        {empty && (\n          <div className=\"notification pt-1 pb-1 pr-1 pl-1 mb-2\">\n            {title}\n          </div>\n        )}\n        {load ? (\n          <div className=\"box\">\n            {message}...<Spin />\n          </div>\n        ) : (\n        <Form\n          className=\"has-text-left\"\n          hideRequiredMark\n          onFinish={submit}\n          onFinishFailed={r=>{console.log(r)}}\n          layout=\"vertical\"\n          form={form}\n        >\n          <Form.Item\n            noStyle\n          >\n            Username\n            <Form.Item\n              rules={[{required: true}]}\n              className=\"mb-2\"\n              name=\"username\"\n            >\n              <Input />\n            </Form.Item>\n          </Form.Item>\n          <Form.Item\n            noStyle\n          >\n            Password\n            <Form.Item\n              rules={[{required: true}]}\n              className=\"mb-2\"\n              name=\"password\"\n            >\n              <Input.Password />\n            </Form.Item>\n          </Form.Item>\n          <Form.Item className=\"has-text-centered mb-2\">\n            <Button type=\"primary\" htmlType=\"submit\">\n              SAVE\n            </Button>\n          </Form.Item>\n        </Form>\n        )}\n    </div>\n  )\n}\n\nexport default Creds","import React from 'react'\nimport {Button, Space} from 'antd'\nimport { GithubOutlined, HomeOutlined, InstagramOutlined, TwitterOutlined } from '@ant-design/icons'\nimport SendEvent from '../Common/Events/SendEvent'\n\nconst Footer = () => {\n  return(\n    <div className=\"has-text-centered\">\n      Made with ❤️ by <a title=\"_a_gryffindor\" target=\"_blank\" rel=\"noreferrer noopener\" onClick={()=>{SendEvent('Click Aman', 'Instagram Link CLick', 'Click')}} href=\"https://instagram.com/_a_gryffindor\">Aman</a>\n      <div>\n{/*         <Button type=\"link\" target=\"_blank\" title=\"Twitter\" rel=\"noreferrer noopener\" onClick={()=>{SendEvent('Click Aman', 'Twitter Link CLick', 'Click')}} href=\"https://twitter.com/onlyoneaman\">\n          <TwitterOutlined />\n        </Button>\n        <Button title=\"Medium\" type=\"link\" target=\"_blank\" rel=\"noreferrer noopener\" onClick={()=>{SendEvent('Click Aman', 'Medium Link CLick', 'Click')}} href=\"https://onlyoneaman.medium.com\">\n          <HomeOutlined />\n        </Button>\n        <Button type=\"link\" title=\"Instagram\" target=\"_blank\" rel=\"noreferrer noopener\" onClick={()=>{SendEvent('Click Aman', 'Instagram Link CLick', 'Click')}} href=\"https://instagram.com/_a_gryffindor\">\n          <InstagramOutlined />\n        </Button> */}\n      </div>\n      <Space>\n        <Button type=\"link\" href=\"https://forms.gle/WztdHSSMpT4DMHbU6\" target=\"_blank\" rel=\"noreferrer noopener\" className=\"pr-0\" onClick={()=>SendEvent('Click Report Bug', 'Report A Bug', 'Click')}>\n          Report A Bug\n        </Button>\n        |\n        <Button type=\"link\" target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://github.com/onlyoneaman/iitj-wlan-firewall-login\" className=\"pr-0 pl-0\" onClick={()=>SendEvent('Click Github', 'Visit Source Code', 'Click')}>\n          <GithubOutlined />\n        </Button>\n        |\n        <Button type=\"link\" target=\"_blank\" rel=\"noreferrer noopener\" href=\"https://onlyoneaman.medium.com/wlan-cred-6f77ed2fce5c\" className=\"pl-0\" onClick={()=>SendEvent('Click Github', 'Visit Source Code', 'Click')}>\n          More on Blog\n        </Button>\n      </Space>\n    </div>\n  )\n}\n\nexport default Footer","import React, {useEffect} from 'react'\nimport './Components/all.sass'\nimport Creds from './Components/Creds'\nimport Footer from './Components/Footer'\nimport ReactGA from \"react-ga\";\nimport ApplicationConstants from './Enums/ApplicationConstants'\n\nconst App = () => {\n\n  useEffect(()=>{\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <div className=\"section has-text-centered pt-4 pb-2\" style={{display: 'grid', height: 'inherit'}}>\n          <Creds />\n          <div className=\"is-align-self-flex-end\">\n            <Footer />\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}